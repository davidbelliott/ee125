-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.
--num_debounced[0] is num_debounced[0]
--register power-up is low

num_debounced[0] = DFFEAS(A1L126, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[3] is num_debounced[3]
--register power-up is low

num_debounced[3] = DFFEAS(A1L130, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[14] is num_debounced[14]
--register power-up is low

num_debounced[14] = DFFEAS(A1L134, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[30] is num_debounced[30]
--register power-up is low

num_debounced[30] = DFFEAS(A1L138, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[29] is num_debounced[29]
--register power-up is low

num_debounced[29] = DFFEAS(A1L142, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[4] is num_debounced[4]
--register power-up is low

num_debounced[4] = DFFEAS(A1L146, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[5] is num_debounced[5]
--register power-up is low

num_debounced[5] = DFFEAS(A1L150, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[6] is num_debounced[6]
--register power-up is low

num_debounced[6] = DFFEAS(A1L154, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[7] is num_debounced[7]
--register power-up is low

num_debounced[7] = DFFEAS(A1L158, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[9] is num_debounced[9]
--register power-up is low

num_debounced[9] = DFFEAS(A1L162, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[8] is num_debounced[8]
--register power-up is low

num_debounced[8] = DFFEAS(A1L166, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[10] is num_debounced[10]
--register power-up is low

num_debounced[10] = DFFEAS(A1L170, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[11] is num_debounced[11]
--register power-up is low

num_debounced[11] = DFFEAS(A1L174, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[12] is num_debounced[12]
--register power-up is low

num_debounced[12] = DFFEAS(A1L178, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[13] is num_debounced[13]
--register power-up is low

num_debounced[13] = DFFEAS(A1L182, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[16] is num_debounced[16]
--register power-up is low

num_debounced[16] = DFFEAS(A1L186, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[15] is num_debounced[15]
--register power-up is low

num_debounced[15] = DFFEAS(A1L190, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[23] is num_debounced[23]
--register power-up is low

num_debounced[23] = DFFEAS(A1L194, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[24] is num_debounced[24]
--register power-up is low

num_debounced[24] = DFFEAS(A1L198, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[25] is num_debounced[25]
--register power-up is low

num_debounced[25] = DFFEAS(A1L202, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[26] is num_debounced[26]
--register power-up is low

num_debounced[26] = DFFEAS(A1L206, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[28] is num_debounced[28]
--register power-up is low

num_debounced[28] = DFFEAS(A1L210, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[27] is num_debounced[27]
--register power-up is low

num_debounced[27] = DFFEAS(A1L214, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[17] is num_debounced[17]
--register power-up is low

num_debounced[17] = DFFEAS(A1L218, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[18] is num_debounced[18]
--register power-up is low

num_debounced[18] = DFFEAS(A1L222, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[19] is num_debounced[19]
--register power-up is low

num_debounced[19] = DFFEAS(A1L226, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[20] is num_debounced[20]
--register power-up is low

num_debounced[20] = DFFEAS(A1L230, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[22] is num_debounced[22]
--register power-up is low

num_debounced[22] = DFFEAS(A1L234, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[21] is num_debounced[21]
--register power-up is low

num_debounced[21] = DFFEAS(A1L238, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[2] is num_debounced[2]
--register power-up is low

num_debounced[2] = DFFEAS(A1L242, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_debounced[1] is num_debounced[1]
--register power-up is low

num_debounced[1] = DFFEAS(A1L246, !B1_y, rst,  ,  ,  ,  , C1L7,  );


--num_bounced[0] is num_bounced[0]
--register power-up is low

num_bounced[0] = DFFEAS(A1L2, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[3] is num_bounced[3]
--register power-up is low

num_bounced[3] = DFFEAS(A1L6, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[6] is num_bounced[6]
--register power-up is low

num_bounced[6] = DFFEAS(A1L10, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[30] is num_bounced[30]
--register power-up is low

num_bounced[30] = DFFEAS(A1L14, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[29] is num_bounced[29]
--register power-up is low

num_bounced[29] = DFFEAS(A1L18, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[4] is num_bounced[4]
--register power-up is low

num_bounced[4] = DFFEAS(A1L22, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[5] is num_bounced[5]
--register power-up is low

num_bounced[5] = DFFEAS(A1L26, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[14] is num_bounced[14]
--register power-up is low

num_bounced[14] = DFFEAS(A1L30, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[7] is num_bounced[7]
--register power-up is low

num_bounced[7] = DFFEAS(A1L34, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[9] is num_bounced[9]
--register power-up is low

num_bounced[9] = DFFEAS(A1L38, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[8] is num_bounced[8]
--register power-up is low

num_bounced[8] = DFFEAS(A1L42, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[10] is num_bounced[10]
--register power-up is low

num_bounced[10] = DFFEAS(A1L46, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[11] is num_bounced[11]
--register power-up is low

num_bounced[11] = DFFEAS(A1L50, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[12] is num_bounced[12]
--register power-up is low

num_bounced[12] = DFFEAS(A1L54, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[13] is num_bounced[13]
--register power-up is low

num_bounced[13] = DFFEAS(A1L58, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[16] is num_bounced[16]
--register power-up is low

num_bounced[16] = DFFEAS(A1L62, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[15] is num_bounced[15]
--register power-up is low

num_bounced[15] = DFFEAS(A1L66, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[23] is num_bounced[23]
--register power-up is low

num_bounced[23] = DFFEAS(A1L70, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[24] is num_bounced[24]
--register power-up is low

num_bounced[24] = DFFEAS(A1L74, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[25] is num_bounced[25]
--register power-up is low

num_bounced[25] = DFFEAS(A1L78, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[26] is num_bounced[26]
--register power-up is low

num_bounced[26] = DFFEAS(A1L82, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[28] is num_bounced[28]
--register power-up is low

num_bounced[28] = DFFEAS(A1L86, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[27] is num_bounced[27]
--register power-up is low

num_bounced[27] = DFFEAS(A1L90, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[17] is num_bounced[17]
--register power-up is low

num_bounced[17] = DFFEAS(A1L94, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[18] is num_bounced[18]
--register power-up is low

num_bounced[18] = DFFEAS(A1L98, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[19] is num_bounced[19]
--register power-up is low

num_bounced[19] = DFFEAS(A1L102, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[20] is num_bounced[20]
--register power-up is low

num_bounced[20] = DFFEAS(A1L106, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[22] is num_bounced[22]
--register power-up is low

num_bounced[22] = DFFEAS(A1L110, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[21] is num_bounced[21]
--register power-up is low

num_bounced[21] = DFFEAS(A1L114, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[2] is num_bounced[2]
--register power-up is low

num_bounced[2] = DFFEAS(A1L118, !x, rst,  ,  ,  ,  , C2L7,  );


--num_bounced[1] is num_bounced[1]
--register power-up is low

num_bounced[1] = DFFEAS(A1L122, !x, rst,  ,  ,  ,  , C2L7,  );


--A1L126 is Add1~1
A1L126_adder_eqn = ( num_debounced[0] ) + ( VCC ) + ( !VCC );
A1L126 = SUM(A1L126_adder_eqn);

--A1L127 is Add1~2
A1L127_adder_eqn = ( num_debounced[0] ) + ( VCC ) + ( !VCC );
A1L127 = CARRY(A1L127_adder_eqn);


--A1L130 is Add1~5
A1L130_adder_eqn = ( num_debounced[3] ) + ( GND ) + ( A1L243 );
A1L130 = SUM(A1L130_adder_eqn);

--A1L131 is Add1~6
A1L131_adder_eqn = ( num_debounced[3] ) + ( GND ) + ( A1L243 );
A1L131 = CARRY(A1L131_adder_eqn);


--A1L134 is Add1~9
A1L134_adder_eqn = ( num_debounced[14] ) + ( GND ) + ( A1L183 );
A1L134 = SUM(A1L134_adder_eqn);

--A1L135 is Add1~10
A1L135_adder_eqn = ( num_debounced[14] ) + ( GND ) + ( A1L183 );
A1L135 = CARRY(A1L135_adder_eqn);


--A1L138 is Add1~13
A1L138_adder_eqn = ( num_debounced[30] ) + ( GND ) + ( A1L143 );
A1L138 = SUM(A1L138_adder_eqn);


--A1L142 is Add1~17
A1L142_adder_eqn = ( num_debounced[29] ) + ( GND ) + ( A1L211 );
A1L142 = SUM(A1L142_adder_eqn);

--A1L143 is Add1~18
A1L143_adder_eqn = ( num_debounced[29] ) + ( GND ) + ( A1L211 );
A1L143 = CARRY(A1L143_adder_eqn);


--A1L146 is Add1~21
A1L146_adder_eqn = ( num_debounced[4] ) + ( GND ) + ( A1L131 );
A1L146 = SUM(A1L146_adder_eqn);

--A1L147 is Add1~22
A1L147_adder_eqn = ( num_debounced[4] ) + ( GND ) + ( A1L131 );
A1L147 = CARRY(A1L147_adder_eqn);


--A1L150 is Add1~25
A1L150_adder_eqn = ( num_debounced[5] ) + ( GND ) + ( A1L147 );
A1L150 = SUM(A1L150_adder_eqn);

--A1L151 is Add1~26
A1L151_adder_eqn = ( num_debounced[5] ) + ( GND ) + ( A1L147 );
A1L151 = CARRY(A1L151_adder_eqn);


--A1L154 is Add1~29
A1L154_adder_eqn = ( num_debounced[6] ) + ( GND ) + ( A1L151 );
A1L154 = SUM(A1L154_adder_eqn);

--A1L155 is Add1~30
A1L155_adder_eqn = ( num_debounced[6] ) + ( GND ) + ( A1L151 );
A1L155 = CARRY(A1L155_adder_eqn);


--A1L158 is Add1~33
A1L158_adder_eqn = ( num_debounced[7] ) + ( GND ) + ( A1L155 );
A1L158 = SUM(A1L158_adder_eqn);

--A1L159 is Add1~34
A1L159_adder_eqn = ( num_debounced[7] ) + ( GND ) + ( A1L155 );
A1L159 = CARRY(A1L159_adder_eqn);


--A1L162 is Add1~37
A1L162_adder_eqn = ( num_debounced[9] ) + ( GND ) + ( A1L167 );
A1L162 = SUM(A1L162_adder_eqn);

--A1L163 is Add1~38
A1L163_adder_eqn = ( num_debounced[9] ) + ( GND ) + ( A1L167 );
A1L163 = CARRY(A1L163_adder_eqn);


--A1L166 is Add1~41
A1L166_adder_eqn = ( num_debounced[8] ) + ( GND ) + ( A1L159 );
A1L166 = SUM(A1L166_adder_eqn);

--A1L167 is Add1~42
A1L167_adder_eqn = ( num_debounced[8] ) + ( GND ) + ( A1L159 );
A1L167 = CARRY(A1L167_adder_eqn);


--A1L170 is Add1~45
A1L170_adder_eqn = ( num_debounced[10] ) + ( GND ) + ( A1L163 );
A1L170 = SUM(A1L170_adder_eqn);

--A1L171 is Add1~46
A1L171_adder_eqn = ( num_debounced[10] ) + ( GND ) + ( A1L163 );
A1L171 = CARRY(A1L171_adder_eqn);


--A1L174 is Add1~49
A1L174_adder_eqn = ( num_debounced[11] ) + ( GND ) + ( A1L171 );
A1L174 = SUM(A1L174_adder_eqn);

--A1L175 is Add1~50
A1L175_adder_eqn = ( num_debounced[11] ) + ( GND ) + ( A1L171 );
A1L175 = CARRY(A1L175_adder_eqn);


--A1L178 is Add1~53
A1L178_adder_eqn = ( num_debounced[12] ) + ( GND ) + ( A1L175 );
A1L178 = SUM(A1L178_adder_eqn);

--A1L179 is Add1~54
A1L179_adder_eqn = ( num_debounced[12] ) + ( GND ) + ( A1L175 );
A1L179 = CARRY(A1L179_adder_eqn);


--A1L182 is Add1~57
A1L182_adder_eqn = ( num_debounced[13] ) + ( GND ) + ( A1L179 );
A1L182 = SUM(A1L182_adder_eqn);

--A1L183 is Add1~58
A1L183_adder_eqn = ( num_debounced[13] ) + ( GND ) + ( A1L179 );
A1L183 = CARRY(A1L183_adder_eqn);


--A1L186 is Add1~61
A1L186_adder_eqn = ( num_debounced[16] ) + ( GND ) + ( A1L191 );
A1L186 = SUM(A1L186_adder_eqn);

--A1L187 is Add1~62
A1L187_adder_eqn = ( num_debounced[16] ) + ( GND ) + ( A1L191 );
A1L187 = CARRY(A1L187_adder_eqn);


--A1L190 is Add1~65
A1L190_adder_eqn = ( num_debounced[15] ) + ( GND ) + ( A1L135 );
A1L190 = SUM(A1L190_adder_eqn);

--A1L191 is Add1~66
A1L191_adder_eqn = ( num_debounced[15] ) + ( GND ) + ( A1L135 );
A1L191 = CARRY(A1L191_adder_eqn);


--A1L194 is Add1~69
A1L194_adder_eqn = ( num_debounced[23] ) + ( GND ) + ( A1L235 );
A1L194 = SUM(A1L194_adder_eqn);

--A1L195 is Add1~70
A1L195_adder_eqn = ( num_debounced[23] ) + ( GND ) + ( A1L235 );
A1L195 = CARRY(A1L195_adder_eqn);


--A1L198 is Add1~73
A1L198_adder_eqn = ( num_debounced[24] ) + ( GND ) + ( A1L195 );
A1L198 = SUM(A1L198_adder_eqn);

--A1L199 is Add1~74
A1L199_adder_eqn = ( num_debounced[24] ) + ( GND ) + ( A1L195 );
A1L199 = CARRY(A1L199_adder_eqn);


--A1L202 is Add1~77
A1L202_adder_eqn = ( num_debounced[25] ) + ( GND ) + ( A1L199 );
A1L202 = SUM(A1L202_adder_eqn);

--A1L203 is Add1~78
A1L203_adder_eqn = ( num_debounced[25] ) + ( GND ) + ( A1L199 );
A1L203 = CARRY(A1L203_adder_eqn);


--A1L206 is Add1~81
A1L206_adder_eqn = ( num_debounced[26] ) + ( GND ) + ( A1L203 );
A1L206 = SUM(A1L206_adder_eqn);

--A1L207 is Add1~82
A1L207_adder_eqn = ( num_debounced[26] ) + ( GND ) + ( A1L203 );
A1L207 = CARRY(A1L207_adder_eqn);


--A1L210 is Add1~85
A1L210_adder_eqn = ( num_debounced[28] ) + ( GND ) + ( A1L215 );
A1L210 = SUM(A1L210_adder_eqn);

--A1L211 is Add1~86
A1L211_adder_eqn = ( num_debounced[28] ) + ( GND ) + ( A1L215 );
A1L211 = CARRY(A1L211_adder_eqn);


--A1L214 is Add1~89
A1L214_adder_eqn = ( num_debounced[27] ) + ( GND ) + ( A1L207 );
A1L214 = SUM(A1L214_adder_eqn);

--A1L215 is Add1~90
A1L215_adder_eqn = ( num_debounced[27] ) + ( GND ) + ( A1L207 );
A1L215 = CARRY(A1L215_adder_eqn);


--A1L218 is Add1~93
A1L218_adder_eqn = ( num_debounced[17] ) + ( GND ) + ( A1L187 );
A1L218 = SUM(A1L218_adder_eqn);

--A1L219 is Add1~94
A1L219_adder_eqn = ( num_debounced[17] ) + ( GND ) + ( A1L187 );
A1L219 = CARRY(A1L219_adder_eqn);


--A1L222 is Add1~97
A1L222_adder_eqn = ( num_debounced[18] ) + ( GND ) + ( A1L219 );
A1L222 = SUM(A1L222_adder_eqn);

--A1L223 is Add1~98
A1L223_adder_eqn = ( num_debounced[18] ) + ( GND ) + ( A1L219 );
A1L223 = CARRY(A1L223_adder_eqn);


--A1L226 is Add1~101
A1L226_adder_eqn = ( num_debounced[19] ) + ( GND ) + ( A1L223 );
A1L226 = SUM(A1L226_adder_eqn);

--A1L227 is Add1~102
A1L227_adder_eqn = ( num_debounced[19] ) + ( GND ) + ( A1L223 );
A1L227 = CARRY(A1L227_adder_eqn);


--A1L230 is Add1~105
A1L230_adder_eqn = ( num_debounced[20] ) + ( GND ) + ( A1L227 );
A1L230 = SUM(A1L230_adder_eqn);

--A1L231 is Add1~106
A1L231_adder_eqn = ( num_debounced[20] ) + ( GND ) + ( A1L227 );
A1L231 = CARRY(A1L231_adder_eqn);


--A1L234 is Add1~109
A1L234_adder_eqn = ( num_debounced[22] ) + ( GND ) + ( A1L239 );
A1L234 = SUM(A1L234_adder_eqn);

--A1L235 is Add1~110
A1L235_adder_eqn = ( num_debounced[22] ) + ( GND ) + ( A1L239 );
A1L235 = CARRY(A1L235_adder_eqn);


--A1L238 is Add1~113
A1L238_adder_eqn = ( num_debounced[21] ) + ( GND ) + ( A1L231 );
A1L238 = SUM(A1L238_adder_eqn);

--A1L239 is Add1~114
A1L239_adder_eqn = ( num_debounced[21] ) + ( GND ) + ( A1L231 );
A1L239 = CARRY(A1L239_adder_eqn);


--A1L242 is Add1~117
A1L242_adder_eqn = ( num_debounced[2] ) + ( GND ) + ( A1L247 );
A1L242 = SUM(A1L242_adder_eqn);

--A1L243 is Add1~118
A1L243_adder_eqn = ( num_debounced[2] ) + ( GND ) + ( A1L247 );
A1L243 = CARRY(A1L243_adder_eqn);


--A1L246 is Add1~121
A1L246_adder_eqn = ( num_debounced[1] ) + ( GND ) + ( A1L127 );
A1L246 = SUM(A1L246_adder_eqn);

--A1L247 is Add1~122
A1L247_adder_eqn = ( num_debounced[1] ) + ( GND ) + ( A1L127 );
A1L247 = CARRY(A1L247_adder_eqn);


--A1L2 is Add0~1
A1L2_adder_eqn = ( num_bounced[0] ) + ( VCC ) + ( !VCC );
A1L2 = SUM(A1L2_adder_eqn);

--A1L3 is Add0~2
A1L3_adder_eqn = ( num_bounced[0] ) + ( VCC ) + ( !VCC );
A1L3 = CARRY(A1L3_adder_eqn);


--A1L6 is Add0~5
A1L6_adder_eqn = ( num_bounced[3] ) + ( GND ) + ( A1L119 );
A1L6 = SUM(A1L6_adder_eqn);

--A1L7 is Add0~6
A1L7_adder_eqn = ( num_bounced[3] ) + ( GND ) + ( A1L119 );
A1L7 = CARRY(A1L7_adder_eqn);


--A1L10 is Add0~9
A1L10_adder_eqn = ( num_bounced[6] ) + ( GND ) + ( A1L27 );
A1L10 = SUM(A1L10_adder_eqn);

--A1L11 is Add0~10
A1L11_adder_eqn = ( num_bounced[6] ) + ( GND ) + ( A1L27 );
A1L11 = CARRY(A1L11_adder_eqn);


--A1L14 is Add0~13
A1L14_adder_eqn = ( num_bounced[30] ) + ( GND ) + ( A1L19 );
A1L14 = SUM(A1L14_adder_eqn);


--A1L18 is Add0~17
A1L18_adder_eqn = ( num_bounced[29] ) + ( GND ) + ( A1L87 );
A1L18 = SUM(A1L18_adder_eqn);

--A1L19 is Add0~18
A1L19_adder_eqn = ( num_bounced[29] ) + ( GND ) + ( A1L87 );
A1L19 = CARRY(A1L19_adder_eqn);


--A1L22 is Add0~21
A1L22_adder_eqn = ( num_bounced[4] ) + ( GND ) + ( A1L7 );
A1L22 = SUM(A1L22_adder_eqn);

--A1L23 is Add0~22
A1L23_adder_eqn = ( num_bounced[4] ) + ( GND ) + ( A1L7 );
A1L23 = CARRY(A1L23_adder_eqn);


--A1L26 is Add0~25
A1L26_adder_eqn = ( num_bounced[5] ) + ( GND ) + ( A1L23 );
A1L26 = SUM(A1L26_adder_eqn);

--A1L27 is Add0~26
A1L27_adder_eqn = ( num_bounced[5] ) + ( GND ) + ( A1L23 );
A1L27 = CARRY(A1L27_adder_eqn);


--A1L30 is Add0~29
A1L30_adder_eqn = ( num_bounced[14] ) + ( GND ) + ( A1L59 );
A1L30 = SUM(A1L30_adder_eqn);

--A1L31 is Add0~30
A1L31_adder_eqn = ( num_bounced[14] ) + ( GND ) + ( A1L59 );
A1L31 = CARRY(A1L31_adder_eqn);


--A1L34 is Add0~33
A1L34_adder_eqn = ( num_bounced[7] ) + ( GND ) + ( A1L11 );
A1L34 = SUM(A1L34_adder_eqn);

--A1L35 is Add0~34
A1L35_adder_eqn = ( num_bounced[7] ) + ( GND ) + ( A1L11 );
A1L35 = CARRY(A1L35_adder_eqn);


--A1L38 is Add0~37
A1L38_adder_eqn = ( num_bounced[9] ) + ( GND ) + ( A1L43 );
A1L38 = SUM(A1L38_adder_eqn);

--A1L39 is Add0~38
A1L39_adder_eqn = ( num_bounced[9] ) + ( GND ) + ( A1L43 );
A1L39 = CARRY(A1L39_adder_eqn);


--A1L42 is Add0~41
A1L42_adder_eqn = ( num_bounced[8] ) + ( GND ) + ( A1L35 );
A1L42 = SUM(A1L42_adder_eqn);

--A1L43 is Add0~42
A1L43_adder_eqn = ( num_bounced[8] ) + ( GND ) + ( A1L35 );
A1L43 = CARRY(A1L43_adder_eqn);


--A1L46 is Add0~45
A1L46_adder_eqn = ( num_bounced[10] ) + ( GND ) + ( A1L39 );
A1L46 = SUM(A1L46_adder_eqn);

--A1L47 is Add0~46
A1L47_adder_eqn = ( num_bounced[10] ) + ( GND ) + ( A1L39 );
A1L47 = CARRY(A1L47_adder_eqn);


--A1L50 is Add0~49
A1L50_adder_eqn = ( num_bounced[11] ) + ( GND ) + ( A1L47 );
A1L50 = SUM(A1L50_adder_eqn);

--A1L51 is Add0~50
A1L51_adder_eqn = ( num_bounced[11] ) + ( GND ) + ( A1L47 );
A1L51 = CARRY(A1L51_adder_eqn);


--A1L54 is Add0~53
A1L54_adder_eqn = ( num_bounced[12] ) + ( GND ) + ( A1L51 );
A1L54 = SUM(A1L54_adder_eqn);

--A1L55 is Add0~54
A1L55_adder_eqn = ( num_bounced[12] ) + ( GND ) + ( A1L51 );
A1L55 = CARRY(A1L55_adder_eqn);


--A1L58 is Add0~57
A1L58_adder_eqn = ( num_bounced[13] ) + ( GND ) + ( A1L55 );
A1L58 = SUM(A1L58_adder_eqn);

--A1L59 is Add0~58
A1L59_adder_eqn = ( num_bounced[13] ) + ( GND ) + ( A1L55 );
A1L59 = CARRY(A1L59_adder_eqn);


--A1L62 is Add0~61
A1L62_adder_eqn = ( num_bounced[16] ) + ( GND ) + ( A1L67 );
A1L62 = SUM(A1L62_adder_eqn);

--A1L63 is Add0~62
A1L63_adder_eqn = ( num_bounced[16] ) + ( GND ) + ( A1L67 );
A1L63 = CARRY(A1L63_adder_eqn);


--A1L66 is Add0~65
A1L66_adder_eqn = ( num_bounced[15] ) + ( GND ) + ( A1L31 );
A1L66 = SUM(A1L66_adder_eqn);

--A1L67 is Add0~66
A1L67_adder_eqn = ( num_bounced[15] ) + ( GND ) + ( A1L31 );
A1L67 = CARRY(A1L67_adder_eqn);


--A1L70 is Add0~69
A1L70_adder_eqn = ( num_bounced[23] ) + ( GND ) + ( A1L111 );
A1L70 = SUM(A1L70_adder_eqn);

--A1L71 is Add0~70
A1L71_adder_eqn = ( num_bounced[23] ) + ( GND ) + ( A1L111 );
A1L71 = CARRY(A1L71_adder_eqn);


--A1L74 is Add0~73
A1L74_adder_eqn = ( num_bounced[24] ) + ( GND ) + ( A1L71 );
A1L74 = SUM(A1L74_adder_eqn);

--A1L75 is Add0~74
A1L75_adder_eqn = ( num_bounced[24] ) + ( GND ) + ( A1L71 );
A1L75 = CARRY(A1L75_adder_eqn);


--A1L78 is Add0~77
A1L78_adder_eqn = ( num_bounced[25] ) + ( GND ) + ( A1L75 );
A1L78 = SUM(A1L78_adder_eqn);

--A1L79 is Add0~78
A1L79_adder_eqn = ( num_bounced[25] ) + ( GND ) + ( A1L75 );
A1L79 = CARRY(A1L79_adder_eqn);


--A1L82 is Add0~81
A1L82_adder_eqn = ( num_bounced[26] ) + ( GND ) + ( A1L79 );
A1L82 = SUM(A1L82_adder_eqn);

--A1L83 is Add0~82
A1L83_adder_eqn = ( num_bounced[26] ) + ( GND ) + ( A1L79 );
A1L83 = CARRY(A1L83_adder_eqn);


--A1L86 is Add0~85
A1L86_adder_eqn = ( num_bounced[28] ) + ( GND ) + ( A1L91 );
A1L86 = SUM(A1L86_adder_eqn);

--A1L87 is Add0~86
A1L87_adder_eqn = ( num_bounced[28] ) + ( GND ) + ( A1L91 );
A1L87 = CARRY(A1L87_adder_eqn);


--A1L90 is Add0~89
A1L90_adder_eqn = ( num_bounced[27] ) + ( GND ) + ( A1L83 );
A1L90 = SUM(A1L90_adder_eqn);

--A1L91 is Add0~90
A1L91_adder_eqn = ( num_bounced[27] ) + ( GND ) + ( A1L83 );
A1L91 = CARRY(A1L91_adder_eqn);


--A1L94 is Add0~93
A1L94_adder_eqn = ( num_bounced[17] ) + ( GND ) + ( A1L63 );
A1L94 = SUM(A1L94_adder_eqn);

--A1L95 is Add0~94
A1L95_adder_eqn = ( num_bounced[17] ) + ( GND ) + ( A1L63 );
A1L95 = CARRY(A1L95_adder_eqn);


--A1L98 is Add0~97
A1L98_adder_eqn = ( num_bounced[18] ) + ( GND ) + ( A1L95 );
A1L98 = SUM(A1L98_adder_eqn);

--A1L99 is Add0~98
A1L99_adder_eqn = ( num_bounced[18] ) + ( GND ) + ( A1L95 );
A1L99 = CARRY(A1L99_adder_eqn);


--A1L102 is Add0~101
A1L102_adder_eqn = ( num_bounced[19] ) + ( GND ) + ( A1L99 );
A1L102 = SUM(A1L102_adder_eqn);

--A1L103 is Add0~102
A1L103_adder_eqn = ( num_bounced[19] ) + ( GND ) + ( A1L99 );
A1L103 = CARRY(A1L103_adder_eqn);


--A1L106 is Add0~105
A1L106_adder_eqn = ( num_bounced[20] ) + ( GND ) + ( A1L103 );
A1L106 = SUM(A1L106_adder_eqn);

--A1L107 is Add0~106
A1L107_adder_eqn = ( num_bounced[20] ) + ( GND ) + ( A1L103 );
A1L107 = CARRY(A1L107_adder_eqn);


--A1L110 is Add0~109
A1L110_adder_eqn = ( num_bounced[22] ) + ( GND ) + ( A1L115 );
A1L110 = SUM(A1L110_adder_eqn);

--A1L111 is Add0~110
A1L111_adder_eqn = ( num_bounced[22] ) + ( GND ) + ( A1L115 );
A1L111 = CARRY(A1L111_adder_eqn);


--A1L114 is Add0~113
A1L114_adder_eqn = ( num_bounced[21] ) + ( GND ) + ( A1L107 );
A1L114 = SUM(A1L114_adder_eqn);

--A1L115 is Add0~114
A1L115_adder_eqn = ( num_bounced[21] ) + ( GND ) + ( A1L107 );
A1L115 = CARRY(A1L115_adder_eqn);


--A1L118 is Add0~117
A1L118_adder_eqn = ( num_bounced[2] ) + ( GND ) + ( A1L123 );
A1L118 = SUM(A1L118_adder_eqn);

--A1L119 is Add0~118
A1L119_adder_eqn = ( num_bounced[2] ) + ( GND ) + ( A1L123 );
A1L119 = CARRY(A1L119_adder_eqn);


--A1L122 is Add0~121
A1L122_adder_eqn = ( num_bounced[1] ) + ( GND ) + ( A1L3 );
A1L122 = SUM(A1L122_adder_eqn);

--A1L123 is Add0~122
A1L123_adder_eqn = ( num_bounced[1] ) + ( GND ) + ( A1L3 );
A1L123 = CARRY(A1L123_adder_eqn);


--ssd_debounced_pins[0] is ssd_debounced_pins[0]
ssd_debounced_pins[0] = OUTPUT(C1_WideOr4);


--ssd_debounced_pins[1] is ssd_debounced_pins[1]
ssd_debounced_pins[1] = OUTPUT(C1_WideOr3);


--ssd_debounced_pins[2] is ssd_debounced_pins[2]
ssd_debounced_pins[2] = OUTPUT(C1L15);


--ssd_debounced_pins[3] is ssd_debounced_pins[3]
ssd_debounced_pins[3] = OUTPUT(C1L13);


--ssd_debounced_pins[4] is ssd_debounced_pins[4]
ssd_debounced_pins[4] = OUTPUT(C1_ssd[4]);


--ssd_debounced_pins[5] is ssd_debounced_pins[5]
ssd_debounced_pins[5] = OUTPUT(C1_WideOr0);


--ssd_debounced_pins[6] is ssd_debounced_pins[6]
ssd_debounced_pins[6] = OUTPUT(C1_ssd[6]);


--ssd_bounced_pins[0] is ssd_bounced_pins[0]
ssd_bounced_pins[0] = OUTPUT(C2_WideOr4);


--ssd_bounced_pins[1] is ssd_bounced_pins[1]
ssd_bounced_pins[1] = OUTPUT(C2_WideOr3);


--ssd_bounced_pins[2] is ssd_bounced_pins[2]
ssd_bounced_pins[2] = OUTPUT(C2L15);


--ssd_bounced_pins[3] is ssd_bounced_pins[3]
ssd_bounced_pins[3] = OUTPUT(C2L13);


--ssd_bounced_pins[4] is ssd_bounced_pins[4]
ssd_bounced_pins[4] = OUTPUT(C2_ssd[4]);


--ssd_bounced_pins[5] is ssd_bounced_pins[5]
ssd_bounced_pins[5] = OUTPUT(C2_WideOr0);


--ssd_bounced_pins[6] is ssd_bounced_pins[6]
ssd_bounced_pins[6] = OUTPUT(C2_ssd[6]);


--C1L1 is ssd:ssd_debounced|Equal0~0
C1L1 = (!num_debounced[14] & (!num_debounced[30] & !num_debounced[29]));


--C1L2 is ssd:ssd_debounced|Equal0~1
C1L2 = ( !num_debounced[9] & ( !num_debounced[8] & ( (!num_debounced[4] & (!num_debounced[5] & (!num_debounced[6] & !num_debounced[7]))) ) ) );


--C1L3 is ssd:ssd_debounced|Equal0~2
C1L3 = ( !num_debounced[16] & ( !num_debounced[15] & ( (!num_debounced[10] & (!num_debounced[11] & (!num_debounced[12] & !num_debounced[13]))) ) ) );


--C1L4 is ssd:ssd_debounced|Equal0~3
C1L4 = ( !num_debounced[28] & ( !num_debounced[27] & ( (!num_debounced[23] & (!num_debounced[24] & (!num_debounced[25] & !num_debounced[26]))) ) ) );


--C1L5 is ssd:ssd_debounced|Equal0~4
C1L5 = ( !num_debounced[21] & ( (!num_debounced[18] & (!num_debounced[19] & (!num_debounced[20] & !num_debounced[22]))) ) );


--C1L6 is ssd:ssd_debounced|Equal0~5
C1L6 = ( !num_debounced[17] & ( C1L5 & ( (C1L1 & (C1L2 & (C1L3 & C1L4))) ) ) );


--C1_WideOr4 is ssd:ssd_debounced|WideOr4
C1_WideOr4 = ( num_debounced[1] & ( (num_debounced[0] & (!num_debounced[3] & (C1L6 & num_debounced[2]))) ) ) # ( !num_debounced[1] & ( (!num_debounced[3] & (C1L6 & !num_debounced[2])) ) );


--C1_WideOr3 is ssd:ssd_debounced|WideOr3
C1_WideOr3 = ( num_debounced[1] & ( (!num_debounced[3] & (C1L6 & ((!num_debounced[2]) # (num_debounced[0])))) ) ) # ( !num_debounced[1] & ( (num_debounced[0] & (!num_debounced[3] & (C1L6 & !num_debounced[2]))) ) );


--C1_WideOr2 is ssd:ssd_debounced|WideOr2
C1_WideOr2 = ( num_debounced[1] & ( (!num_debounced[0]) # ((!C1L6) # (num_debounced[3])) ) ) # ( !num_debounced[1] & ( (!C1L6) # ((!num_debounced[2] & (!num_debounced[0])) # (num_debounced[2] & ((num_debounced[3])))) ) );


--C1L12 is ssd:ssd_debounced|WideOr1~0
C1L12 = ( num_debounced[1] & ( (!num_debounced[0]) # (((!C1L6) # (!num_debounced[2])) # (num_debounced[3])) ) ) # ( !num_debounced[1] & ( ((!C1L6) # (!num_debounced[0] $ (num_debounced[2]))) # (num_debounced[3]) ) );


--C1_ssd[4] is ssd:ssd_debounced|ssd[4]
C1_ssd[4] = ( num_debounced[1] & ( ((!C1L6) # ((!num_debounced[0] & !num_debounced[2]))) # (num_debounced[3]) ) ) # ( !num_debounced[1] & ( (!C1L6) # ((num_debounced[3] & num_debounced[2])) ) );


--C1_WideOr0 is ssd:ssd_debounced|WideOr0
C1_WideOr0 = ( num_debounced[1] & ( ((!C1L6) # ((!num_debounced[0] & num_debounced[2]))) # (num_debounced[3]) ) ) # ( !num_debounced[1] & ( (!C1L6) # ((num_debounced[2] & ((num_debounced[3]) # (num_debounced[0])))) ) );


--C1_ssd[6] is ssd:ssd_debounced|ssd[6]
C1_ssd[6] = ( !num_debounced[1] & ( (!num_debounced[3] & (C1L6 & (!num_debounced[0] $ (!num_debounced[2])))) ) );


--C2L1 is ssd:ssd_bounced|Equal0~0
C2L1 = (!num_bounced[6] & (!num_bounced[30] & !num_bounced[29]));


--C2L2 is ssd:ssd_bounced|Equal0~1
C2L2 = ( !num_bounced[9] & ( !num_bounced[8] & ( (!num_bounced[4] & (!num_bounced[5] & (!num_bounced[14] & !num_bounced[7]))) ) ) );


--C2L3 is ssd:ssd_bounced|Equal0~2
C2L3 = ( !num_bounced[16] & ( !num_bounced[15] & ( (!num_bounced[10] & (!num_bounced[11] & (!num_bounced[12] & !num_bounced[13]))) ) ) );


--C2L4 is ssd:ssd_bounced|Equal0~3
C2L4 = ( !num_bounced[28] & ( !num_bounced[27] & ( (!num_bounced[23] & (!num_bounced[24] & (!num_bounced[25] & !num_bounced[26]))) ) ) );


--C2L5 is ssd:ssd_bounced|Equal0~4
C2L5 = ( !num_bounced[21] & ( (!num_bounced[18] & (!num_bounced[19] & (!num_bounced[20] & !num_bounced[22]))) ) );


--C2L6 is ssd:ssd_bounced|Equal0~5
C2L6 = ( !num_bounced[17] & ( C2L5 & ( (C2L1 & (C2L2 & (C2L3 & C2L4))) ) ) );


--C2_WideOr4 is ssd:ssd_bounced|WideOr4
C2_WideOr4 = ( num_bounced[1] & ( (num_bounced[0] & (!num_bounced[3] & (C2L6 & num_bounced[2]))) ) ) # ( !num_bounced[1] & ( (!num_bounced[3] & (C2L6 & !num_bounced[2])) ) );


--C2_WideOr3 is ssd:ssd_bounced|WideOr3
C2_WideOr3 = ( num_bounced[1] & ( (!num_bounced[3] & (C2L6 & ((!num_bounced[2]) # (num_bounced[0])))) ) ) # ( !num_bounced[1] & ( (num_bounced[0] & (!num_bounced[3] & (C2L6 & !num_bounced[2]))) ) );


--C2_WideOr2 is ssd:ssd_bounced|WideOr2
C2_WideOr2 = ( num_bounced[1] & ( (!num_bounced[0]) # ((!C2L6) # (num_bounced[3])) ) ) # ( !num_bounced[1] & ( (!C2L6) # ((!num_bounced[2] & (!num_bounced[0])) # (num_bounced[2] & ((num_bounced[3])))) ) );


--C2L12 is ssd:ssd_bounced|WideOr1~0
C2L12 = ( num_bounced[1] & ( (!num_bounced[0]) # (((!C2L6) # (!num_bounced[2])) # (num_bounced[3])) ) ) # ( !num_bounced[1] & ( ((!C2L6) # (!num_bounced[0] $ (num_bounced[2]))) # (num_bounced[3]) ) );


--C2_ssd[4] is ssd:ssd_bounced|ssd[4]
C2_ssd[4] = ( num_bounced[1] & ( ((!C2L6) # ((!num_bounced[0] & !num_bounced[2]))) # (num_bounced[3]) ) ) # ( !num_bounced[1] & ( (!C2L6) # ((num_bounced[3] & num_bounced[2])) ) );


--C2_WideOr0 is ssd:ssd_bounced|WideOr0
C2_WideOr0 = ( num_bounced[1] & ( ((!C2L6) # ((!num_bounced[0] & num_bounced[2]))) # (num_bounced[3]) ) ) # ( !num_bounced[1] & ( (!C2L6) # ((num_bounced[2] & ((num_bounced[3]) # (num_bounced[0])))) ) );


--C2_ssd[6] is ssd:ssd_bounced|ssd[6]
C2_ssd[6] = ( !num_bounced[1] & ( (!num_bounced[3] & (C2L6 & (!num_bounced[0] $ (!num_bounced[2])))) ) );


--B1_y is switch_debouncer:debouncer|y
--register power-up is low

B1_y = DFFEAS(B1L9, clk,  ,  ,  ,  ,  ,  ,  );


--rst is rst
rst = INPUT();


--C1L7 is ssd:ssd_debounced|Equal9~0
C1L7 = ( !num_debounced[1] & ( (num_debounced[0] & (num_debounced[3] & (C1L6 & !num_debounced[2]))) ) );


--x is x
x = INPUT();


--C2L7 is ssd:ssd_bounced|Equal9~0
C2L7 = ( !num_bounced[1] & ( (num_bounced[0] & (num_bounced[3] & (C2L6 & !num_bounced[2]))) ) );


--B1_t[2] is switch_debouncer:debouncer|t[2]
--register power-up is low

B1_t[2] = DFFEAS(B1L5, clk,  ,  ,  ,  ,  ,  ,  );


--B1_t[0] is switch_debouncer:debouncer|t[0]
--register power-up is low

B1_t[0] = DFFEAS(B1L6, clk,  ,  ,  ,  ,  ,  ,  );


--B1_t[1] is switch_debouncer:debouncer|t[1]
--register power-up is low

B1_t[1] = DFFEAS(B1L7, clk,  ,  ,  ,  ,  ,  ,  );


--B1L9 is switch_debouncer:debouncer|y~0
B1L9 = ( B1_t[1] & ( B1_y ) ) # ( !B1_t[1] & ( (!B1_t[2] & (B1_y)) # (B1_t[2] & ((!B1_t[0] & (B1_y)) # (B1_t[0] & ((x))))) ) );


--clk is clk
clk = INPUT();


--B1L5 is switch_debouncer:debouncer|t~0
B1L5 = ( B1_t[1] & ( (!B1_y & (x & (!B1_t[2] $ (!B1_t[0])))) # (B1_y & (!x & (!B1_t[2] $ (!B1_t[0])))) ) ) # ( !B1_t[1] & ( (B1_t[2] & (!B1_y $ (!x))) ) );


--B1L6 is switch_debouncer:debouncer|t~1
B1L6 = (!B1_t[0] & (!B1_y $ (!x)));


--B1L7 is switch_debouncer:debouncer|t~2
B1L7 = (!B1_y & (x & (!B1_t[0] $ (!B1_t[1])))) # (B1_y & (!x & (!B1_t[0] $ (!B1_t[1]))));


--C2L13 is ssd:ssd_bounced|WideOr1~0_wirecell
C2L13 = !C2L12;


--C2L15 is ssd:ssd_bounced|WideOr2~_wirecell
C2L15 = !C2_WideOr2;


--C1L13 is ssd:ssd_debounced|WideOr1~0_wirecell
C1L13 = !C1L12;


--C1L15 is ssd:ssd_debounced|WideOr2~_wirecell
C1L15 = !C1_WideOr2;


