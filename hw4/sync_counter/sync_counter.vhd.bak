-------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;
-------------------------------------------------------------------------
entity sync_counter is
	generic (n: integer :=8 );	--number of input bits
	port (x: in std_logic_vector(n-1 downto 0);
			ssd: out std_logic_vector(6 downto 0);
			y: buffer integer);
end entity;
-------------------------------------------------------------------------
architecture sync_counter of sync_counter is
	--define type int_vector to store a vector of integers
	type int_vector is array(n-1 downto 0) of integer;
	--first_ones is a copy of the input x, but with only the leading ones set
	signal first_ones: std_logic_vector(n-1 downto 0);
	signal ones_count: int_vector;	--vector for summing up the ones
begin
	first_ones(n-1)<= x(n-1);
	ones_count(n-1)<=1 when x(n-1)='1' else 0;
	gen: for i in n-2 downto 0 generate
		first_ones(i)<=first_ones(i+1) and x(i);	--cut off ones when hit zero
		--increment sum if this element is one
		ones_count(i)<=ones_count(i+1) + 1 when(first_ones(i)='1') else ones_count(i+1);
	end generate;
	y<=ones_count(0);	--the final sum is the last (0th) bit in the ones_count vector
	--encode into ssd bits
	with y select
		ssd <=	"0000001" when 0,
				"1001111" when 1,
				"0010010" when 2,
			    "0000110" when 3,
			    "1001100" when 4,
				"0100100" when 5,
				"0100000" when 6,
				"0001111" when 7,
				"0000000" when 8,
				"0000100" when 9,
				"0110000" when others;
end architecture;
-------------------------------------------------------------------------
component TFF is
	port (a, b: in std_logic;
			x, y: out std_logic;)